(function(w) {
	if (typeof (w.openstream) === "undefined")
		w.openstream = {};
	if (typeof (w.openstream) !== "object") {
		console
				.error("FATAL ERROR: Unable to initialize openstream.common.dateutil. Namespace error. 'openstream' is already defined and is not an object. Unexpected!");
		return;
	}
	if (typeof (w.openstream.common) === "undefined")
		w.openstream.common = {};
	if (typeof (w.openstream.common) !== "object") {
		console
				.error("FATAL ERROR: Unable to initialize openstream.common.dateutil. Namespace error. 'openstream.common' is already defined and is not an object. Unexpected!");
		return;
	}
	if (typeof (w.openstream.common.dateutil) === "undefined")
		w.openstream.common.dateutil = {};
	if (typeof (w.openstream.common.dateutil) !== "object") {
		console
				.error("FATAL ERROR: Unable to initialize openstream.common.dateutil. Namespace error. 'openstream.common.dateutil' is already defined and is not an object. Unexpected!");
		return;
	}
	w.openstream.common.dateutil.isCurrentTimeInRange = function(
			startHourOfDay, endHourOfDay, daysOfWeekArray, whichTimezone) {
		startHourOfDay = startHourOfDay === undefined ? 8 : startHourOfDay;
		endHourOfDay = endHourOfDay === undefined ? 18 : endHourOfDay;
		if (startHourOfDay > endHourOfDay) {
			console
					.error("Error: startHourOfDay is greater than endHourOfDay. Unexpected.");
			return undefined;
		}
		daysOfWeekArray = daysOfWeekArray === undefined ? [ 1, 2, 3, 4, 5 ]
				: daysOfWeekArray;
		if (Array.isArray(daysOfWeekArray) === false) {
			console
					.error("Error: daysOfWeekArray is not an Array. Unexpected.");
			return undefined;
		}
		whichTimezone = whichTimezone === undefined ? "America/New_York"
				: whichTimezone;
		var nowDate = new Date();
		var nowDayOfWeek = nowDate.getDay();

		// if ($.inArray(nowDate.getDay(), daysOfWeekArray) < 0)
		// 	return false;
		var found =false;
		for ( var i = 0, length = daysOfWeekArray.length; i < length; i++ ) {
			if ( daysOfWeekArray[ i ] === nowDate.getDay() ) {
				found = true;
			}
		}
		if(!found)
			return false;

		try {
			var nowTimeStr = new String(nowDate.toLocaleTimeString("en-US", {
				"timeZone" : whichTimezone
			}));
			var nowTimeArray = nowTimeStr.split(' ');
			var nowAmpm = nowTimeArray[1];
			var nowHour = parseInt(new Number(nowTimeArray[0].split(':')[0]));
			if (nowAmpm === "PM" && nowHour !== 12)
				nowHour += 12;
			else if (nowAmpm === "AM" && nowHour === 12)
				nowHour = 0;
			return nowHour >= startHourOfDay && nowHour < endHourOfDay ? true
					: false;
		} catch (ex) {
			console.error("Error: Could not get a date in timezone "
					+ whichTimezone);
			console.error(ex);
			return undefined;
		}
	};
})(window);